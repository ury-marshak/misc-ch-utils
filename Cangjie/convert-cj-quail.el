

(defun cj-data-converter (dicbuf)
  (let ((dic '()))
    (with-current-buffer dicbuf
      (goto-char (point-min))
      (search-forward "[DATA]")
      (forward-line 1)
      (let ((table (make-hash-table :test 'equal))
            key trans val)
        (while (not (eobp))
          (let* ((case-fold-search t)
                 (re-search-result (re-search-forward "^\\([a-z]+\\)[[:space:]]+\\([[:alpha:]]+\\)\r*$" nil t))
                 trans)
            (setq key (downcase (match-string 1)))
            (setq trans (match-string 2))
            (setq val (gethash key table))
            (if val (setq trans (concat val trans)))
            (puthash key trans table)          
            ))
        (maphash #'(lambda (key val) (setq dic (cons (cons key val) dic)))
		 table)))

    (insert "(quail-define-rules\n")
    (setq dic (sort dic (function (lambda (x y) (string< (car x ) (car y))))))
    (dolist (elt dic)
      (insert (format "(%S\t%S)\n" (car elt) (cdr elt))))


    (let ((punctuation '((";" "；﹔，、﹐﹑")
			 (":" "：︰﹕．。‧﹒·")
			 ("'" "’‘")
			 ("\"" "”“〝〞〃")
			 ("\\" "＼﹨╲")
			 ("|" "｜︱︳∣")
			 ("/" "／∕╱")
			 ("?" "？﹖")
			 ("<" "〈＜﹤︿∠")
			 (">" "〉＞﹥﹀")
			 ("[" "〔【﹝︹︻「『﹁﹃")
			 ("]" "〕】﹞︺︼」』﹂﹄")
			 ("{" "｛﹛︷ ")
			 ("}" "｝﹜︸")
			 ("`" "‵′")
			 ("~" "～﹋﹌︴﹏")
			 ("!" "！﹗")
			 ("@" "＠﹫")
			 ("#" "＃﹟")
			 ("$" "＄﹩")
			 ("%" "％﹪")
			 ("&" "＆﹠")
			 ("*" "＊﹡※☆★")
			 ("(" "（﹙︵")
			 (")" "）﹚︶")
			 ("-" "–—¯￣－﹣")
			 ("_" "＿ˍ")
			 ("=" "＝﹦")
			 ("+" "＋﹢"))))
      (dolist (elt punctuation)
        (insert (format "(%S %S)\n" (concat "z" (car elt))
                        (nth 1 elt)))))
    
    (insert ")\n")
    ))

(defun cj-convert (name shortname fulltitle filename quailfile &optional dirname)
  "Convert a dictionary file FILENAME into a Quail package.
Optional argument DIRNAME if specified is the directory name under which
the generated Quail package is saved."

  (or (file-readable-p filename)
      (error "%s does not exist" filename))

  ;; Explicitly set eol format to `unix'.
  ;;(setq coding-system-for-write 'utf-8-unix)

  (let* ((coding 'utf-8-unix)
        (coding-system-for-write coding))
    (with-temp-file (expand-file-name quailfile dirname)
      (insert (format-message ";; Quail package `%s'\n" name))
      (insert (format-message
               ";;   Generated by the command `cj-convert'\n"))
      (insert ";;   Source dictionary file: " filename "\n")
      (insert "\n")
      (insert ";;; Code:\n\n")
      (insert "(require 'quail)\n")
      (insert "(quail-define-package \"" name "\" \""
              "Chinese"
              "\" \"" shortname "\" t\n")
      (insert (format "\"中文輸入【%s】

   [Q 手] [W 田] [E 水] [R 口] [T 廿] [Y 卜] [U 山] [I 戈] [O 人] [P 心]

    [A 日] [S 尸] [D 木] [F 火] [G 土] [H 竹] [J 十] [L 中]

      [Z  ] [X 難] [C 金] [V 女] [B 月] [N 弓] [M 一]

\\\\<quail-translation-docstring>\"\n"
                      fulltitle))
  ;;     (insert "
  ;; '((\".\" . quail-next-translation-block)
  ;;  (\",\" . quail-prev-translation-block))")
      
            (insert "
  '((\" \" . quail-select-current))
")
  (insert " t nil)\n\n")
      
      (let* ((coding-system-for-read 'utf-8-unix)
             (dicbuf (find-file-noselect filename)))
        (cj-data-converter dicbuf)
        (kill-buffer dicbuf))
    
      (insert ";; Local Variables:\n"
              ";; version-control: never\n"
              ";; no-update-autoloads: t\n"
              (format ";; coding: %s\n" coding)
              ";; End:\n\n"
              ";;; " quailfile " ends here\n")))  
  
  )



(defun cj-convert-cj5-70000 (dirname)
  (cj-convert "cangjie5" "倉5" "五倉世紀" (expand-file-name "cj5-70000.txt" dirname) "cj5-70000-quail.el" dirname))


;; (cj-convert-cj5-70000 "/home/ury/work/CH/Cangjie")
;; (load-file "/home/ury/work/CH/Cangjie/cj5-70000-quail.elc")

;; (register-input-method "cangjie5" "Chinese" 'quail-use-package "倉5" "倉頡5" "cj5-70000-quail")

;; (register-input-method "cangjie5" "Chinese-BIG5" 'quail-use-package "倉5" "倉頡5" )

;; (quail-use-package "cangjie5")
;; (quail-activate 1)


